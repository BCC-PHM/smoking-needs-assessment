---
title: "Smoking Needs Assessment Analysis"
author: "David Ellis"
execute:
  echo: false
  warning: false
format: 
  html:
    embed-resources: true
    toc: true
---


```{r setup}
library(readxl)
library(dplyr)
library(stringr)

# Get path for GP registration data
source("config.R")

# Load GP registration data (all ages)
GP_reg_data <- read_excel(
  file.path(
    GP_reg_data_path,
    "BSol-GP-all-demographics-June2025.xlsx"
  )
) %>%
  filter(
    Locality != "Solihull"
  ) %>%
  rename(
    Ethnicity = Ethnic_Description_National
  ) 

GP_eths <- GP_reg_data %>%
  group_by(
    GP_Code, GP_Name, PCN, Locality, Ethnicity
  ) %>%
  summarise(
    N = sum(BSOL_Registrants, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    N = round(N / 5) * 5
  )

GP_Age_Gender <- GP_reg_data %>%
  mutate(
    Age_group = case_when(
      Age < 16 ~ "0-15",
      Age < 25 ~ "16-24",
      Age < 35 ~ "25-34",
      Age < 45 ~ "35-44",
      Age < 55 ~ "45-54",
      Age < 65 ~ "55-64",
      Age < 75 ~ "65-74",
      Age >= 75 ~ "75+",
      TRUE ~ NA
    )
  ) %>%
  group_by(
    GP_Code, GP_Name, PCN, Locality, Age_group, Gender
  ) %>%
  summarise(
    N = sum(BSOL_Registrants, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    N = round(N / 5) * 5
  )

GP_IMD <- GP_reg_data %>%
  group_by(
    GP_Code, GP_Name, PCN, Locality, IMD_Quintile
  ) %>%
  summarise(
    N = sum(BSOL_Registrants, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    N = round(N / 5) * 5,
    IMD_Quintile = case_when(
      is.null(IMD_Quintile) ~ "Unknown",
      TRUE ~ as.character(IMD_Quintile)
    )
  )

pharm_eths <- read_excel(
  "../data/pharmacy-demographic-estimates.xlsx",
  sheet = "Ethnicity"
  ) %>%
  filter(
    Ethnic_Group != "Total_Population"
  )

pharm_IMD <- read_excel(
  "../data/pharmacy-demographic-estimates.xlsx",
  sheet = "Deprivation"
  )

pharm_Age_Gender <- read_excel(
  "../data/pharmacy-demographic-estimates.xlsx",
  sheet = "Age & Sex"
  )

# Make data available to ojs
ojs_define(GP_eths = GP_eths)
ojs_define(GP_Age_Gender = GP_Age_Gender)
ojs_define(GP_IMD = GP_IMD)
ojs_define(pharm_eths = pharm_eths)
ojs_define(pharm_IMD = pharm_IMD)
ojs_define(pharm_Age_Gender = pharm_Age_Gender)
```

## Smoking Cessation Services

The map below shows the smoking QOF prevalence (2023/24) and the location of BCC commissioned smoking cessation services.

```{=html}
<iframe width="100%" height="700" src="https://bcc-phm.github.io/reports/smoking_prev_map.html" title=""></iframe>
```

## GP Patient Demographics

For data security, all counts relating to GP registrations are rounded to the nearest 5.

```{ojs}

/* Make data compatible with ojs */
GP_eths_ojs = aq.from(transpose(GP_eths))
GP_Age_Gender_ojs = aq.from(transpose(GP_Age_Gender))
GP_IMD_ojs = aq.from(transpose(GP_IMD))

// Extract unique Practice Names from the table
Practice_Names = GP_eths_ojs.array("GP_Name").filter((v, i, a) => a.indexOf(v) === i).sort()

/* Get input from user */
viewof variable = Inputs.select(Practice_Names, {label: "Choose a Practice"})

/*  Filter based on selected variable */
GP_eths_filtered = GP_eths_ojs.params({ variable }).filter((d) => d.GP_Name === variable)
GP_Age_Gender_filtered = GP_Age_Gender_ojs.params({ variable }).filter((d) => d.GP_Name === variable)
GP_IMD_filtered = GP_IMD_ojs.params({ variable }).filter((d) => d.GP_Name === variable)
```
:::{.columns}

::: {.column width="100%"}

```{ojs eth_plot}
Plot.plot({
  width: 800, 
  height: 300, 
  marginLeft: 80,
  marginBottom: 120,
  /* Set axis labels */
  x: { 
      label: "Ethnicity",
      tickRotate: -45
      },
  y: { label: "Number of patients" },
  marks: [
    Plot.barY(GP_eths_filtered, {
      y: "N",
      x: "Ethnicity",
      fill: "#7570b3"
    })
  ]
})
```

:::

::: {.column width="40%"}

```{ojs IMD_plot}
Plot.plot({
  width: 320, 
  height: 240, 
  marginLeft: 80,
  marginTop: 60,
  /* Set axis labels */
  x: { 
    label: "IMD Quintile",
    type: "band", // explicitly treat x as categorical
    domain: ["1", "2", "3", "4", "5", "Unknown"]
    },
  y: { label: "Number of patients" },
  marks: [
    Plot.barY(GP_IMD_filtered, {
      y: "N",
      x: "IMD_Quintile",
      fill: "#7570b3"
    })
  ]
})
```

:::

::: {.column width="60%"}

```{ojs gender_age_plot}
Plot.plot({
  width: 480, 
  height: 200, 
  marginLeft: 40,
  x: { 
    label: "Age Group",
    // type: "band", 
    domain: ["0-15", "16-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75+" ] 
  },
  y: { label: "Number of patients" },
  color: {
    legend: true,
    scheme: "Dark2"
  },
  marks: [
    Plot.barY(GP_Age_Gender_filtered, {
      x: "Age_group",
      y: "N",
      fill: "Gender"
      }),
  ]
})

```

:::

:::


## Pharmacy/Business Customer Demographics

The demographics of pharmacy customers are estimated based on those living within 1km of the pharmacy using the 2021 ONS census. Only Birmingham residents are included in the analysis.


```{ojs pharm_prep}

/* Make data compatible with ojs */
pharm_eths_ojs = aq.from(transpose(pharm_eths))
pharm_Age_Gender_ojs = aq.from(transpose(pharm_Age_Gender))
pharm_IMD_ojs = aq.from(transpose(pharm_IMD))

// Extract unique Practice Names from the table
Pharmacy_Names = pharm_eths_ojs.array("Name_Code").filter((v, i, a) => a.indexOf(v) === i).sort()

/* Get input from user */
viewof variable2 = Inputs.select(Pharmacy_Names, {label: "Choose a Pharmacy"})

/*  Filter based on selected variable */
pharm_eths_filtered = pharm_eths_ojs.params({ variable2 }).filter((d) => d.Name_Code === variable2)
pharm_Age_Gender_filtered = pharm_Age_Gender_ojs.params({ variable2 }).filter((d) => d.Name_Code === variable2)
pharm_IMD_filtered = pharm_IMD_ojs.params({ variable2 }).filter((d) => d.Name_Code === variable2)
```
:::{.columns}

::: {.column width="100%"}

```{ojs pharm_eth_plot}
Plot.plot({
  width: 800,
  height: 300,
  marginLeft: 80,
  marginBottom: 120,
  /* Set axis labels */
  x: {
      label: "Ethnicity",
      tickRotate: -45
      },
  y: { label: "Number of Residents" },
  marks: [
    Plot.barY(pharm_eths_filtered, {
      y: "Est_Num",
      x: "Ethnic_Group",
      fill: "#7570b3"
    })
  ]
})
```

:::

::: {.column width="40%"}

```{ojs pharm_IMD_plot}
Plot.plot({
  width: 320,
  height: 240,
  marginLeft: 80,
  marginTop: 60,
  /* Set axis labels */
  x: {
    label: "IMD Quintile",
    type: "band", // explicitly treat x as categorical
    domain: ["1", "2", "3", "4", "5"]
    },
  y: { label: "Number of Residents" },
  marks: [
    Plot.barY(pharm_IMD_filtered, {
      y: "Est_Num",
      x: "IMD_quintile",
      fill: "#7570b3"
    })
  ]
})
```

:::

::: {.column width="60%"}

```{ojs pharm_gender_age_plot}
Plot.plot({
  width: 480,
  height: 200,
  marginLeft: 40,
  x: {
    label: "Age Group",
    // type: "band",
    domain: ["0-15", "16-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75+" ]
  },
  y: { label: "Number of Residents" },
  color: {
    legend: true,
    scheme: "Dark2"
  },
  marks: [
    Plot.barY(pharm_Age_Gender_filtered, {
      x: "Age_group",
      y: "Est_Num",
      fill: "Sex"
      }),
  ]
})

```

:::

:::